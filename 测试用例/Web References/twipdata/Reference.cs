//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.1008
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.1008 版自动生成。
// 
#pragma warning disable 1591

namespace 测试用例.twipdata {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="tWipTrackingSoap", Namespace="http://tempuri.org/")]
    public partial class tWipTracking : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetQueryWipOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWipTrackingListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWipTrackingLineListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPartNumberAndwoIdListOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateWipCartonTrayPalletOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateWipStockInNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStockInPrintOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertWipUndoOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateScrapWipTrackingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWipDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateWipStationOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateWipStation_NEWOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEsnDataInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback StnRecOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMaxBoxNumberBywoIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertCartonInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateWipAndRecCartonBoxOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCartonStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCartonPrintContentOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertWipKeyPartsOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertWipKeyPartOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNotCloseBoxInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMaxBoxNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSnInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPackCartonOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWoAllSerialOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPwdColumnsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCartonContentOperationCompleted;
        
        private System.Threading.SendOrPostCallback CROSSTAB_WIPOperationCompleted;
        
        private System.Threading.SendOrPostCallback CloseCartonBoxOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCartonSnListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSnTestMachineInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateFirstCartonOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateWipTrackingWeightOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public tWipTracking() {
            this.Url = global::测试用例.Properties.Settings.Default.测试用例_twipdata_tWipTracking;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetQueryWipCompletedEventHandler GetQueryWipCompleted;
        
        /// <remarks/>
        public event GetWipTrackingListCompletedEventHandler GetWipTrackingListCompleted;
        
        /// <remarks/>
        public event GetWipTrackingLineListCompletedEventHandler GetWipTrackingLineListCompleted;
        
        /// <remarks/>
        public event GetPartNumberAndwoIdListCompletedEventHandler GetPartNumberAndwoIdListCompleted;
        
        /// <remarks/>
        public event UpdateWipCartonTrayPalletCompletedEventHandler UpdateWipCartonTrayPalletCompleted;
        
        /// <remarks/>
        public event UpdateWipStockInNumberCompletedEventHandler UpdateWipStockInNumberCompleted;
        
        /// <remarks/>
        public event GetStockInPrintCompletedEventHandler GetStockInPrintCompleted;
        
        /// <remarks/>
        public event InsertWipUndoCompletedEventHandler InsertWipUndoCompleted;
        
        /// <remarks/>
        public event UpdateScrapWipTrackingCompletedEventHandler UpdateScrapWipTrackingCompleted;
        
        /// <remarks/>
        public event GetWipDataCompletedEventHandler GetWipDataCompleted;
        
        /// <remarks/>
        public event UpdateWipStationCompletedEventHandler UpdateWipStationCompleted;
        
        /// <remarks/>
        public event UpdateWipStation_NEWCompletedEventHandler UpdateWipStation_NEWCompleted;
        
        /// <remarks/>
        public event GetEsnDataInfoCompletedEventHandler GetEsnDataInfoCompleted;
        
        /// <remarks/>
        public event StnRecCompletedEventHandler StnRecCompleted;
        
        /// <remarks/>
        public event GetMaxBoxNumberBywoIdCompletedEventHandler GetMaxBoxNumberBywoIdCompleted;
        
        /// <remarks/>
        public event InsertCartonInfoCompletedEventHandler InsertCartonInfoCompleted;
        
        /// <remarks/>
        public event UpdateWipAndRecCartonBoxCompletedEventHandler UpdateWipAndRecCartonBoxCompleted;
        
        /// <remarks/>
        public event GetCartonStateCompletedEventHandler GetCartonStateCompleted;
        
        /// <remarks/>
        public event GetCartonPrintContentCompletedEventHandler GetCartonPrintContentCompleted;
        
        /// <remarks/>
        public event InsertWipKeyPartsCompletedEventHandler InsertWipKeyPartsCompleted;
        
        /// <remarks/>
        public event InsertWipKeyPartCompletedEventHandler InsertWipKeyPartCompleted;
        
        /// <remarks/>
        public event GetNotCloseBoxInfoCompletedEventHandler GetNotCloseBoxInfoCompleted;
        
        /// <remarks/>
        public event GetMaxBoxNumberCompletedEventHandler GetMaxBoxNumberCompleted;
        
        /// <remarks/>
        public event GetSnInfoCompletedEventHandler GetSnInfoCompleted;
        
        /// <remarks/>
        public event GetPackCartonCompletedEventHandler GetPackCartonCompleted;
        
        /// <remarks/>
        public event GetWoAllSerialCompletedEventHandler GetWoAllSerialCompleted;
        
        /// <remarks/>
        public event GetPwdColumnsCompletedEventHandler GetPwdColumnsCompleted;
        
        /// <remarks/>
        public event GetCartonContentCompletedEventHandler GetCartonContentCompleted;
        
        /// <remarks/>
        public event CROSSTAB_WIPCompletedEventHandler CROSSTAB_WIPCompleted;
        
        /// <remarks/>
        public event CloseCartonBoxCompletedEventHandler CloseCartonBoxCompleted;
        
        /// <remarks/>
        public event GetCartonSnListCompletedEventHandler GetCartonSnListCompleted;
        
        /// <remarks/>
        public event GetSnTestMachineInfoCompletedEventHandler GetSnTestMachineInfoCompleted;
        
        /// <remarks/>
        public event UpdateFirstCartonCompletedEventHandler UpdateFirstCartonCompleted;
        
        /// <remarks/>
        public event UpdateWipTrackingWeightCompletedEventHandler UpdateWipTrackingWeightCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetQueryWip", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetQueryWip(string ColumnName, string Data) {
            object[] results = this.Invoke("GetQueryWip", new object[] {
                        ColumnName,
                        Data});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetQueryWipAsync(string ColumnName, string Data) {
            this.GetQueryWipAsync(ColumnName, Data, null);
        }
        
        /// <remarks/>
        public void GetQueryWipAsync(string ColumnName, string Data, object userState) {
            if ((this.GetQueryWipOperationCompleted == null)) {
                this.GetQueryWipOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQueryWipOperationCompleted);
            }
            this.InvokeAsync("GetQueryWip", new object[] {
                        ColumnName,
                        Data}, this.GetQueryWipOperationCompleted, userState);
        }
        
        private void OnGetQueryWipOperationCompleted(object arg) {
            if ((this.GetQueryWipCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQueryWipCompleted(this, new GetQueryWipCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWipTrackingList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetWipTrackingList(string Model, string WoId) {
            object[] results = this.Invoke("GetWipTrackingList", new object[] {
                        Model,
                        WoId});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetWipTrackingListAsync(string Model, string WoId) {
            this.GetWipTrackingListAsync(Model, WoId, null);
        }
        
        /// <remarks/>
        public void GetWipTrackingListAsync(string Model, string WoId, object userState) {
            if ((this.GetWipTrackingListOperationCompleted == null)) {
                this.GetWipTrackingListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWipTrackingListOperationCompleted);
            }
            this.InvokeAsync("GetWipTrackingList", new object[] {
                        Model,
                        WoId}, this.GetWipTrackingListOperationCompleted, userState);
        }
        
        private void OnGetWipTrackingListOperationCompleted(object arg) {
            if ((this.GetWipTrackingListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWipTrackingListCompleted(this, new GetWipTrackingListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWipTrackingLineList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetWipTrackingLineList(string Model, string WoId) {
            object[] results = this.Invoke("GetWipTrackingLineList", new object[] {
                        Model,
                        WoId});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetWipTrackingLineListAsync(string Model, string WoId) {
            this.GetWipTrackingLineListAsync(Model, WoId, null);
        }
        
        /// <remarks/>
        public void GetWipTrackingLineListAsync(string Model, string WoId, object userState) {
            if ((this.GetWipTrackingLineListOperationCompleted == null)) {
                this.GetWipTrackingLineListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWipTrackingLineListOperationCompleted);
            }
            this.InvokeAsync("GetWipTrackingLineList", new object[] {
                        Model,
                        WoId}, this.GetWipTrackingLineListOperationCompleted, userState);
        }
        
        private void OnGetWipTrackingLineListOperationCompleted(object arg) {
            if ((this.GetWipTrackingLineListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWipTrackingLineListCompleted(this, new GetWipTrackingLineListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPartNumberAndwoIdList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetPartNumberAndwoIdList() {
            object[] results = this.Invoke("GetPartNumberAndwoIdList", new object[0]);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPartNumberAndwoIdListAsync() {
            this.GetPartNumberAndwoIdListAsync(null);
        }
        
        /// <remarks/>
        public void GetPartNumberAndwoIdListAsync(object userState) {
            if ((this.GetPartNumberAndwoIdListOperationCompleted == null)) {
                this.GetPartNumberAndwoIdListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPartNumberAndwoIdListOperationCompleted);
            }
            this.InvokeAsync("GetPartNumberAndwoIdList", new object[0], this.GetPartNumberAndwoIdListOperationCompleted, userState);
        }
        
        private void OnGetPartNumberAndwoIdListOperationCompleted(object arg) {
            if ((this.GetPartNumberAndwoIdListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPartNumberAndwoIdListCompleted(this, new GetPartNumberAndwoIdListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateWipCartonTrayPallet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateWipCartonTrayPallet(int PackType, string Data, string Data2, string ESN) {
            this.Invoke("UpdateWipCartonTrayPallet", new object[] {
                        PackType,
                        Data,
                        Data2,
                        ESN});
        }
        
        /// <remarks/>
        public void UpdateWipCartonTrayPalletAsync(int PackType, string Data, string Data2, string ESN) {
            this.UpdateWipCartonTrayPalletAsync(PackType, Data, Data2, ESN, null);
        }
        
        /// <remarks/>
        public void UpdateWipCartonTrayPalletAsync(int PackType, string Data, string Data2, string ESN, object userState) {
            if ((this.UpdateWipCartonTrayPalletOperationCompleted == null)) {
                this.UpdateWipCartonTrayPalletOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateWipCartonTrayPalletOperationCompleted);
            }
            this.InvokeAsync("UpdateWipCartonTrayPallet", new object[] {
                        PackType,
                        Data,
                        Data2,
                        ESN}, this.UpdateWipCartonTrayPalletOperationCompleted, userState);
        }
        
        private void OnUpdateWipCartonTrayPalletOperationCompleted(object arg) {
            if ((this.UpdateWipCartonTrayPalletCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateWipCartonTrayPalletCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateWipStockInNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateWipStockInNumber(string ColumnName, string Data, string StockNo) {
            this.Invoke("UpdateWipStockInNumber", new object[] {
                        ColumnName,
                        Data,
                        StockNo});
        }
        
        /// <remarks/>
        public void UpdateWipStockInNumberAsync(string ColumnName, string Data, string StockNo) {
            this.UpdateWipStockInNumberAsync(ColumnName, Data, StockNo, null);
        }
        
        /// <remarks/>
        public void UpdateWipStockInNumberAsync(string ColumnName, string Data, string StockNo, object userState) {
            if ((this.UpdateWipStockInNumberOperationCompleted == null)) {
                this.UpdateWipStockInNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateWipStockInNumberOperationCompleted);
            }
            this.InvokeAsync("UpdateWipStockInNumber", new object[] {
                        ColumnName,
                        Data,
                        StockNo}, this.UpdateWipStockInNumberOperationCompleted, userState);
        }
        
        private void OnUpdateWipStockInNumberOperationCompleted(object arg) {
            if ((this.UpdateWipStockInNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateWipStockInNumberCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStockInPrint", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetStockInPrint(string StockIn) {
            object[] results = this.Invoke("GetStockInPrint", new object[] {
                        StockIn});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetStockInPrintAsync(string StockIn) {
            this.GetStockInPrintAsync(StockIn, null);
        }
        
        /// <remarks/>
        public void GetStockInPrintAsync(string StockIn, object userState) {
            if ((this.GetStockInPrintOperationCompleted == null)) {
                this.GetStockInPrintOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStockInPrintOperationCompleted);
            }
            this.InvokeAsync("GetStockInPrint", new object[] {
                        StockIn}, this.GetStockInPrintOperationCompleted, userState);
        }
        
        private void OnGetStockInPrintOperationCompleted(object arg) {
            if ((this.GetStockInPrintCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStockInPrintCompleted(this, new GetStockInPrintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertWipUndo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertWipUndo(tWipTrackingTable wtt) {
            object[] results = this.Invoke("InsertWipUndo", new object[] {
                        wtt});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertWipUndoAsync(tWipTrackingTable wtt) {
            this.InsertWipUndoAsync(wtt, null);
        }
        
        /// <remarks/>
        public void InsertWipUndoAsync(tWipTrackingTable wtt, object userState) {
            if ((this.InsertWipUndoOperationCompleted == null)) {
                this.InsertWipUndoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertWipUndoOperationCompleted);
            }
            this.InvokeAsync("InsertWipUndo", new object[] {
                        wtt}, this.InsertWipUndoOperationCompleted, userState);
        }
        
        private void OnInsertWipUndoOperationCompleted(object arg) {
            if ((this.InsertWipUndoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertWipUndoCompleted(this, new InsertWipUndoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateScrapWipTracking", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateScrapWipTracking(tWipTrackingTable wtt) {
            object[] results = this.Invoke("UpdateScrapWipTracking", new object[] {
                        wtt});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateScrapWipTrackingAsync(tWipTrackingTable wtt) {
            this.UpdateScrapWipTrackingAsync(wtt, null);
        }
        
        /// <remarks/>
        public void UpdateScrapWipTrackingAsync(tWipTrackingTable wtt, object userState) {
            if ((this.UpdateScrapWipTrackingOperationCompleted == null)) {
                this.UpdateScrapWipTrackingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateScrapWipTrackingOperationCompleted);
            }
            this.InvokeAsync("UpdateScrapWipTracking", new object[] {
                        wtt}, this.UpdateScrapWipTrackingOperationCompleted, userState);
        }
        
        private void OnUpdateScrapWipTrackingOperationCompleted(object arg) {
            if ((this.UpdateScrapWipTrackingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateScrapWipTrackingCompleted(this, new UpdateScrapWipTrackingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWipData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetWipData(string[] lsWoid) {
            object[] results = this.Invoke("GetWipData", new object[] {
                        lsWoid});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetWipDataAsync(string[] lsWoid) {
            this.GetWipDataAsync(lsWoid, null);
        }
        
        /// <remarks/>
        public void GetWipDataAsync(string[] lsWoid, object userState) {
            if ((this.GetWipDataOperationCompleted == null)) {
                this.GetWipDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWipDataOperationCompleted);
            }
            this.InvokeAsync("GetWipData", new object[] {
                        lsWoid}, this.GetWipDataOperationCompleted, userState);
        }
        
        private void OnGetWipDataOperationCompleted(object arg) {
            if ((this.GetWipDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWipDataCompleted(this, new GetWipDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateWipStation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateWipStation(string line, string mygroup, string esn, string userid, string flag) {
            object[] results = this.Invoke("UpdateWipStation", new object[] {
                        line,
                        mygroup,
                        esn,
                        userid,
                        flag});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateWipStationAsync(string line, string mygroup, string esn, string userid, string flag) {
            this.UpdateWipStationAsync(line, mygroup, esn, userid, flag, null);
        }
        
        /// <remarks/>
        public void UpdateWipStationAsync(string line, string mygroup, string esn, string userid, string flag, object userState) {
            if ((this.UpdateWipStationOperationCompleted == null)) {
                this.UpdateWipStationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateWipStationOperationCompleted);
            }
            this.InvokeAsync("UpdateWipStation", new object[] {
                        line,
                        mygroup,
                        esn,
                        userid,
                        flag}, this.UpdateWipStationOperationCompleted, userState);
        }
        
        private void OnUpdateWipStationOperationCompleted(object arg) {
            if ((this.UpdateWipStationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateWipStationCompleted(this, new UpdateWipStationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateWipStation_NEW", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateWipStation_NEW(string line, string mygroup, string esn, string userid, string flag, string routeId, string woid) {
            object[] results = this.Invoke("UpdateWipStation_NEW", new object[] {
                        line,
                        mygroup,
                        esn,
                        userid,
                        flag,
                        routeId,
                        woid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateWipStation_NEWAsync(string line, string mygroup, string esn, string userid, string flag, string routeId, string woid) {
            this.UpdateWipStation_NEWAsync(line, mygroup, esn, userid, flag, routeId, woid, null);
        }
        
        /// <remarks/>
        public void UpdateWipStation_NEWAsync(string line, string mygroup, string esn, string userid, string flag, string routeId, string woid, object userState) {
            if ((this.UpdateWipStation_NEWOperationCompleted == null)) {
                this.UpdateWipStation_NEWOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateWipStation_NEWOperationCompleted);
            }
            this.InvokeAsync("UpdateWipStation_NEW", new object[] {
                        line,
                        mygroup,
                        esn,
                        userid,
                        flag,
                        routeId,
                        woid}, this.UpdateWipStation_NEWOperationCompleted, userState);
        }
        
        private void OnUpdateWipStation_NEWOperationCompleted(object arg) {
            if ((this.UpdateWipStation_NEWCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateWipStation_NEWCompleted(this, new UpdateWipStation_NEWCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEsnDataInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetEsnDataInfo(string sntype, string snval) {
            object[] results = this.Invoke("GetEsnDataInfo", new object[] {
                        sntype,
                        snval});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetEsnDataInfoAsync(string sntype, string snval) {
            this.GetEsnDataInfoAsync(sntype, snval, null);
        }
        
        /// <remarks/>
        public void GetEsnDataInfoAsync(string sntype, string snval, object userState) {
            if ((this.GetEsnDataInfoOperationCompleted == null)) {
                this.GetEsnDataInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEsnDataInfoOperationCompleted);
            }
            this.InvokeAsync("GetEsnDataInfo", new object[] {
                        sntype,
                        snval}, this.GetEsnDataInfoOperationCompleted, userState);
        }
        
        private void OnGetEsnDataInfoOperationCompleted(object arg) {
            if ((this.GetEsnDataInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEsnDataInfoCompleted(this, new GetEsnDataInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/StnRec", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string StnRec(string lineId, string mygroup, string woId, string esn, int flag) {
            object[] results = this.Invoke("StnRec", new object[] {
                        lineId,
                        mygroup,
                        woId,
                        esn,
                        flag});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StnRecAsync(string lineId, string mygroup, string woId, string esn, int flag) {
            this.StnRecAsync(lineId, mygroup, woId, esn, flag, null);
        }
        
        /// <remarks/>
        public void StnRecAsync(string lineId, string mygroup, string woId, string esn, int flag, object userState) {
            if ((this.StnRecOperationCompleted == null)) {
                this.StnRecOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStnRecOperationCompleted);
            }
            this.InvokeAsync("StnRec", new object[] {
                        lineId,
                        mygroup,
                        woId,
                        esn,
                        flag}, this.StnRecOperationCompleted, userState);
        }
        
        private void OnStnRecOperationCompleted(object arg) {
            if ((this.StnRecCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StnRecCompleted(this, new StnRecCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMaxBoxNumberBywoId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetMaxBoxNumberBywoId(string woId, string lineId) {
            object[] results = this.Invoke("GetMaxBoxNumberBywoId", new object[] {
                        woId,
                        lineId});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMaxBoxNumberBywoIdAsync(string woId, string lineId) {
            this.GetMaxBoxNumberBywoIdAsync(woId, lineId, null);
        }
        
        /// <remarks/>
        public void GetMaxBoxNumberBywoIdAsync(string woId, string lineId, object userState) {
            if ((this.GetMaxBoxNumberBywoIdOperationCompleted == null)) {
                this.GetMaxBoxNumberBywoIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMaxBoxNumberBywoIdOperationCompleted);
            }
            this.InvokeAsync("GetMaxBoxNumberBywoId", new object[] {
                        woId,
                        lineId}, this.GetMaxBoxNumberBywoIdOperationCompleted, userState);
        }
        
        private void OnGetMaxBoxNumberBywoIdOperationCompleted(object arg) {
            if ((this.GetMaxBoxNumberBywoIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMaxBoxNumberBywoIdCompleted(this, new GetMaxBoxNumberBywoIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertCartonInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertCartonInfo(tCartonInfo cartioninfo) {
            object[] results = this.Invoke("InsertCartonInfo", new object[] {
                        cartioninfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertCartonInfoAsync(tCartonInfo cartioninfo) {
            this.InsertCartonInfoAsync(cartioninfo, null);
        }
        
        /// <remarks/>
        public void InsertCartonInfoAsync(tCartonInfo cartioninfo, object userState) {
            if ((this.InsertCartonInfoOperationCompleted == null)) {
                this.InsertCartonInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertCartonInfoOperationCompleted);
            }
            this.InvokeAsync("InsertCartonInfo", new object[] {
                        cartioninfo}, this.InsertCartonInfoOperationCompleted, userState);
        }
        
        private void OnInsertCartonInfoOperationCompleted(object arg) {
            if ((this.InsertCartonInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertCartonInfoCompleted(this, new InsertCartonInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateWipAndRecCartonBox", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateWipAndRecCartonBox(tWipTrackingTable wiptrack) {
            object[] results = this.Invoke("UpdateWipAndRecCartonBox", new object[] {
                        wiptrack});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateWipAndRecCartonBoxAsync(tWipTrackingTable wiptrack) {
            this.UpdateWipAndRecCartonBoxAsync(wiptrack, null);
        }
        
        /// <remarks/>
        public void UpdateWipAndRecCartonBoxAsync(tWipTrackingTable wiptrack, object userState) {
            if ((this.UpdateWipAndRecCartonBoxOperationCompleted == null)) {
                this.UpdateWipAndRecCartonBoxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateWipAndRecCartonBoxOperationCompleted);
            }
            this.InvokeAsync("UpdateWipAndRecCartonBox", new object[] {
                        wiptrack}, this.UpdateWipAndRecCartonBoxOperationCompleted, userState);
        }
        
        private void OnUpdateWipAndRecCartonBoxOperationCompleted(object arg) {
            if ((this.UpdateWipAndRecCartonBoxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateWipAndRecCartonBoxCompleted(this, new UpdateWipAndRecCartonBoxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCartonState", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCartonState(string cartonId) {
            object[] results = this.Invoke("GetCartonState", new object[] {
                        cartonId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCartonStateAsync(string cartonId) {
            this.GetCartonStateAsync(cartonId, null);
        }
        
        /// <remarks/>
        public void GetCartonStateAsync(string cartonId, object userState) {
            if ((this.GetCartonStateOperationCompleted == null)) {
                this.GetCartonStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCartonStateOperationCompleted);
            }
            this.InvokeAsync("GetCartonState", new object[] {
                        cartonId}, this.GetCartonStateOperationCompleted, userState);
        }
        
        private void OnGetCartonStateOperationCompleted(object arg) {
            if ((this.GetCartonStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCartonStateCompleted(this, new GetCartonStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCartonPrintContent", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetCartonPrintContent(string cartonId, string[] Content) {
            object[] results = this.Invoke("GetCartonPrintContent", new object[] {
                        cartonId,
                        Content});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCartonPrintContentAsync(string cartonId, string[] Content) {
            this.GetCartonPrintContentAsync(cartonId, Content, null);
        }
        
        /// <remarks/>
        public void GetCartonPrintContentAsync(string cartonId, string[] Content, object userState) {
            if ((this.GetCartonPrintContentOperationCompleted == null)) {
                this.GetCartonPrintContentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCartonPrintContentOperationCompleted);
            }
            this.InvokeAsync("GetCartonPrintContent", new object[] {
                        cartonId,
                        Content}, this.GetCartonPrintContentOperationCompleted, userState);
        }
        
        private void OnGetCartonPrintContentOperationCompleted(object arg) {
            if ((this.GetCartonPrintContentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCartonPrintContentCompleted(this, new GetCartonPrintContentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertWipKeyParts", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertWipKeyParts(tWipKeyPartTable[] lsWipKeyPart) {
            object[] results = this.Invoke("InsertWipKeyParts", new object[] {
                        lsWipKeyPart});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertWipKeyPartsAsync(tWipKeyPartTable[] lsWipKeyPart) {
            this.InsertWipKeyPartsAsync(lsWipKeyPart, null);
        }
        
        /// <remarks/>
        public void InsertWipKeyPartsAsync(tWipKeyPartTable[] lsWipKeyPart, object userState) {
            if ((this.InsertWipKeyPartsOperationCompleted == null)) {
                this.InsertWipKeyPartsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertWipKeyPartsOperationCompleted);
            }
            this.InvokeAsync("InsertWipKeyParts", new object[] {
                        lsWipKeyPart}, this.InsertWipKeyPartsOperationCompleted, userState);
        }
        
        private void OnInsertWipKeyPartsOperationCompleted(object arg) {
            if ((this.InsertWipKeyPartsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertWipKeyPartsCompleted(this, new InsertWipKeyPartsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertWipKeyPart", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertWipKeyPart(tWipKeyPartTable WipKeyPart) {
            object[] results = this.Invoke("InsertWipKeyPart", new object[] {
                        WipKeyPart});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertWipKeyPartAsync(tWipKeyPartTable WipKeyPart) {
            this.InsertWipKeyPartAsync(WipKeyPart, null);
        }
        
        /// <remarks/>
        public void InsertWipKeyPartAsync(tWipKeyPartTable WipKeyPart, object userState) {
            if ((this.InsertWipKeyPartOperationCompleted == null)) {
                this.InsertWipKeyPartOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertWipKeyPartOperationCompleted);
            }
            this.InvokeAsync("InsertWipKeyPart", new object[] {
                        WipKeyPart}, this.InsertWipKeyPartOperationCompleted, userState);
        }
        
        private void OnInsertWipKeyPartOperationCompleted(object arg) {
            if ((this.InsertWipKeyPartCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertWipKeyPartCompleted(this, new InsertWipKeyPartCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetNotCloseBoxInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetNotCloseBoxInfo(string lineId) {
            object[] results = this.Invoke("GetNotCloseBoxInfo", new object[] {
                        lineId});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetNotCloseBoxInfoAsync(string lineId) {
            this.GetNotCloseBoxInfoAsync(lineId, null);
        }
        
        /// <remarks/>
        public void GetNotCloseBoxInfoAsync(string lineId, object userState) {
            if ((this.GetNotCloseBoxInfoOperationCompleted == null)) {
                this.GetNotCloseBoxInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNotCloseBoxInfoOperationCompleted);
            }
            this.InvokeAsync("GetNotCloseBoxInfo", new object[] {
                        lineId}, this.GetNotCloseBoxInfoOperationCompleted, userState);
        }
        
        private void OnGetNotCloseBoxInfoOperationCompleted(object arg) {
            if ((this.GetNotCloseBoxInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNotCloseBoxInfoCompleted(this, new GetNotCloseBoxInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMaxBoxNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMaxBoxNumber(string woId, string lineId, string partnumber) {
            object[] results = this.Invoke("GetMaxBoxNumber", new object[] {
                        woId,
                        lineId,
                        partnumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMaxBoxNumberAsync(string woId, string lineId, string partnumber) {
            this.GetMaxBoxNumberAsync(woId, lineId, partnumber, null);
        }
        
        /// <remarks/>
        public void GetMaxBoxNumberAsync(string woId, string lineId, string partnumber, object userState) {
            if ((this.GetMaxBoxNumberOperationCompleted == null)) {
                this.GetMaxBoxNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMaxBoxNumberOperationCompleted);
            }
            this.InvokeAsync("GetMaxBoxNumber", new object[] {
                        woId,
                        lineId,
                        partnumber}, this.GetMaxBoxNumberOperationCompleted, userState);
        }
        
        private void OnGetMaxBoxNumberOperationCompleted(object arg) {
            if ((this.GetMaxBoxNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMaxBoxNumberCompleted(this, new GetMaxBoxNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSnInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetSnInfo(string serial) {
            object[] results = this.Invoke("GetSnInfo", new object[] {
                        serial});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSnInfoAsync(string serial) {
            this.GetSnInfoAsync(serial, null);
        }
        
        /// <remarks/>
        public void GetSnInfoAsync(string serial, object userState) {
            if ((this.GetSnInfoOperationCompleted == null)) {
                this.GetSnInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSnInfoOperationCompleted);
            }
            this.InvokeAsync("GetSnInfo", new object[] {
                        serial}, this.GetSnInfoOperationCompleted, userState);
        }
        
        private void OnGetSnInfoOperationCompleted(object arg) {
            if ((this.GetSnInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSnInfoCompleted(this, new GetSnInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPackCarton", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetPackCarton(string woId, string lineId) {
            object[] results = this.Invoke("GetPackCarton", new object[] {
                        woId,
                        lineId});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPackCartonAsync(string woId, string lineId) {
            this.GetPackCartonAsync(woId, lineId, null);
        }
        
        /// <remarks/>
        public void GetPackCartonAsync(string woId, string lineId, object userState) {
            if ((this.GetPackCartonOperationCompleted == null)) {
                this.GetPackCartonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPackCartonOperationCompleted);
            }
            this.InvokeAsync("GetPackCarton", new object[] {
                        woId,
                        lineId}, this.GetPackCartonOperationCompleted, userState);
        }
        
        private void OnGetPackCartonOperationCompleted(object arg) {
            if ((this.GetPackCartonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPackCartonCompleted(this, new GetPackCartonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWoAllSerial", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetWoAllSerial(string woId, int strHoue) {
            object[] results = this.Invoke("GetWoAllSerial", new object[] {
                        woId,
                        strHoue});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetWoAllSerialAsync(string woId, int strHoue) {
            this.GetWoAllSerialAsync(woId, strHoue, null);
        }
        
        /// <remarks/>
        public void GetWoAllSerialAsync(string woId, int strHoue, object userState) {
            if ((this.GetWoAllSerialOperationCompleted == null)) {
                this.GetWoAllSerialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWoAllSerialOperationCompleted);
            }
            this.InvokeAsync("GetWoAllSerial", new object[] {
                        woId,
                        strHoue}, this.GetWoAllSerialOperationCompleted, userState);
        }
        
        private void OnGetWoAllSerialOperationCompleted(object arg) {
            if ((this.GetWoAllSerialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWoAllSerialCompleted(this, new GetWoAllSerialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPwdColumns", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetPwdColumns(string sntype) {
            object[] results = this.Invoke("GetPwdColumns", new object[] {
                        sntype});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPwdColumnsAsync(string sntype) {
            this.GetPwdColumnsAsync(sntype, null);
        }
        
        /// <remarks/>
        public void GetPwdColumnsAsync(string sntype, object userState) {
            if ((this.GetPwdColumnsOperationCompleted == null)) {
                this.GetPwdColumnsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPwdColumnsOperationCompleted);
            }
            this.InvokeAsync("GetPwdColumns", new object[] {
                        sntype}, this.GetPwdColumnsOperationCompleted, userState);
        }
        
        private void OnGetPwdColumnsOperationCompleted(object arg) {
            if ((this.GetPwdColumnsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPwdColumnsCompleted(this, new GetPwdColumnsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCartonContent", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetCartonContent(string cartonId) {
            object[] results = this.Invoke("GetCartonContent", new object[] {
                        cartonId});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCartonContentAsync(string cartonId) {
            this.GetCartonContentAsync(cartonId, null);
        }
        
        /// <remarks/>
        public void GetCartonContentAsync(string cartonId, object userState) {
            if ((this.GetCartonContentOperationCompleted == null)) {
                this.GetCartonContentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCartonContentOperationCompleted);
            }
            this.InvokeAsync("GetCartonContent", new object[] {
                        cartonId}, this.GetCartonContentOperationCompleted, userState);
        }
        
        private void OnGetCartonContentOperationCompleted(object arg) {
            if ((this.GetCartonContentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCartonContentCompleted(this, new GetCartonContentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CROSSTAB_WIP", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] CROSSTAB_WIP(string woId, string Part, int Flag) {
            object[] results = this.Invoke("CROSSTAB_WIP", new object[] {
                        woId,
                        Part,
                        Flag});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void CROSSTAB_WIPAsync(string woId, string Part, int Flag) {
            this.CROSSTAB_WIPAsync(woId, Part, Flag, null);
        }
        
        /// <remarks/>
        public void CROSSTAB_WIPAsync(string woId, string Part, int Flag, object userState) {
            if ((this.CROSSTAB_WIPOperationCompleted == null)) {
                this.CROSSTAB_WIPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCROSSTAB_WIPOperationCompleted);
            }
            this.InvokeAsync("CROSSTAB_WIP", new object[] {
                        woId,
                        Part,
                        Flag}, this.CROSSTAB_WIPOperationCompleted, userState);
        }
        
        private void OnCROSSTAB_WIPOperationCompleted(object arg) {
            if ((this.CROSSTAB_WIPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CROSSTAB_WIPCompleted(this, new CROSSTAB_WIPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CloseCartonBox", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CloseCartonBox(string cartonId) {
            object[] results = this.Invoke("CloseCartonBox", new object[] {
                        cartonId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CloseCartonBoxAsync(string cartonId) {
            this.CloseCartonBoxAsync(cartonId, null);
        }
        
        /// <remarks/>
        public void CloseCartonBoxAsync(string cartonId, object userState) {
            if ((this.CloseCartonBoxOperationCompleted == null)) {
                this.CloseCartonBoxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCloseCartonBoxOperationCompleted);
            }
            this.InvokeAsync("CloseCartonBox", new object[] {
                        cartonId}, this.CloseCartonBoxOperationCompleted, userState);
        }
        
        private void OnCloseCartonBoxOperationCompleted(object arg) {
            if ((this.CloseCartonBoxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CloseCartonBoxCompleted(this, new CloseCartonBoxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCartonSnList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetCartonSnList(string CartonId, int Flag) {
            object[] results = this.Invoke("GetCartonSnList", new object[] {
                        CartonId,
                        Flag});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCartonSnListAsync(string CartonId, int Flag) {
            this.GetCartonSnListAsync(CartonId, Flag, null);
        }
        
        /// <remarks/>
        public void GetCartonSnListAsync(string CartonId, int Flag, object userState) {
            if ((this.GetCartonSnListOperationCompleted == null)) {
                this.GetCartonSnListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCartonSnListOperationCompleted);
            }
            this.InvokeAsync("GetCartonSnList", new object[] {
                        CartonId,
                        Flag}, this.GetCartonSnListOperationCompleted, userState);
        }
        
        private void OnGetCartonSnListOperationCompleted(object arg) {
            if ((this.GetCartonSnListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCartonSnListCompleted(this, new GetCartonSnListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSnTestMachineInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetSnTestMachineInfo(string esn) {
            object[] results = this.Invoke("GetSnTestMachineInfo", new object[] {
                        esn});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSnTestMachineInfoAsync(string esn) {
            this.GetSnTestMachineInfoAsync(esn, null);
        }
        
        /// <remarks/>
        public void GetSnTestMachineInfoAsync(string esn, object userState) {
            if ((this.GetSnTestMachineInfoOperationCompleted == null)) {
                this.GetSnTestMachineInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSnTestMachineInfoOperationCompleted);
            }
            this.InvokeAsync("GetSnTestMachineInfo", new object[] {
                        esn}, this.GetSnTestMachineInfoOperationCompleted, userState);
        }
        
        private void OnGetSnTestMachineInfoOperationCompleted(object arg) {
            if ((this.GetSnTestMachineInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSnTestMachineInfoCompleted(this, new GetSnTestMachineInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateFirstCarton", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateFirstCarton(string newcartonn) {
            this.Invoke("UpdateFirstCarton", new object[] {
                        newcartonn});
        }
        
        /// <remarks/>
        public void UpdateFirstCartonAsync(string newcartonn) {
            this.UpdateFirstCartonAsync(newcartonn, null);
        }
        
        /// <remarks/>
        public void UpdateFirstCartonAsync(string newcartonn, object userState) {
            if ((this.UpdateFirstCartonOperationCompleted == null)) {
                this.UpdateFirstCartonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFirstCartonOperationCompleted);
            }
            this.InvokeAsync("UpdateFirstCarton", new object[] {
                        newcartonn}, this.UpdateFirstCartonOperationCompleted, userState);
        }
        
        private void OnUpdateFirstCartonOperationCompleted(object arg) {
            if ((this.UpdateFirstCartonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateFirstCartonCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateWipTrackingWeight", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateWipTrackingWeight(string esn, string weight) {
            object[] results = this.Invoke("UpdateWipTrackingWeight", new object[] {
                        esn,
                        weight});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateWipTrackingWeightAsync(string esn, string weight) {
            this.UpdateWipTrackingWeightAsync(esn, weight, null);
        }
        
        /// <remarks/>
        public void UpdateWipTrackingWeightAsync(string esn, string weight, object userState) {
            if ((this.UpdateWipTrackingWeightOperationCompleted == null)) {
                this.UpdateWipTrackingWeightOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateWipTrackingWeightOperationCompleted);
            }
            this.InvokeAsync("UpdateWipTrackingWeight", new object[] {
                        esn,
                        weight}, this.UpdateWipTrackingWeightOperationCompleted, userState);
        }
        
        private void OnUpdateWipTrackingWeightOperationCompleted(object arg) {
            if ((this.UpdateWipTrackingWeightCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateWipTrackingWeightCompleted(this, new UpdateWipTrackingWeightCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1015")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class tWipTrackingTable {
        
        private string eSNField;
        
        private string woField;
        
        private string partNumberField;
        
        private string locstationField;
        
        private string wipstationField;
        
        private string nextstationField;
        
        private string userIdField;
        
        private string recdateField;
        
        private string errflagField;
        
        private string scrapflagField;
        
        private string cartonnumberField;
        
        private string trayNOField;
        
        private string palletnumberField;
        
        private string snField;
        
        private string mACField;
        
        private string mcartonnumbrField;
        
        private string mpalletnumberField;
        
        private string lineField;
        
        private string routgroupIdField;
        
        private string storenumberField;
        
        /// <remarks/>
        public string ESN {
            get {
                return this.eSNField;
            }
            set {
                this.eSNField = value;
            }
        }
        
        /// <remarks/>
        public string WO {
            get {
                return this.woField;
            }
            set {
                this.woField = value;
            }
        }
        
        /// <remarks/>
        public string PartNumber {
            get {
                return this.partNumberField;
            }
            set {
                this.partNumberField = value;
            }
        }
        
        /// <remarks/>
        public string locstation {
            get {
                return this.locstationField;
            }
            set {
                this.locstationField = value;
            }
        }
        
        /// <remarks/>
        public string wipstation {
            get {
                return this.wipstationField;
            }
            set {
                this.wipstationField = value;
            }
        }
        
        /// <remarks/>
        public string nextstation {
            get {
                return this.nextstationField;
            }
            set {
                this.nextstationField = value;
            }
        }
        
        /// <remarks/>
        public string userId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
            }
        }
        
        /// <remarks/>
        public string recdate {
            get {
                return this.recdateField;
            }
            set {
                this.recdateField = value;
            }
        }
        
        /// <remarks/>
        public string errflag {
            get {
                return this.errflagField;
            }
            set {
                this.errflagField = value;
            }
        }
        
        /// <remarks/>
        public string scrapflag {
            get {
                return this.scrapflagField;
            }
            set {
                this.scrapflagField = value;
            }
        }
        
        /// <remarks/>
        public string cartonnumber {
            get {
                return this.cartonnumberField;
            }
            set {
                this.cartonnumberField = value;
            }
        }
        
        /// <remarks/>
        public string TrayNO {
            get {
                return this.trayNOField;
            }
            set {
                this.trayNOField = value;
            }
        }
        
        /// <remarks/>
        public string palletnumber {
            get {
                return this.palletnumberField;
            }
            set {
                this.palletnumberField = value;
            }
        }
        
        /// <remarks/>
        public string SN {
            get {
                return this.snField;
            }
            set {
                this.snField = value;
            }
        }
        
        /// <remarks/>
        public string MAC {
            get {
                return this.mACField;
            }
            set {
                this.mACField = value;
            }
        }
        
        /// <remarks/>
        public string mcartonnumbr {
            get {
                return this.mcartonnumbrField;
            }
            set {
                this.mcartonnumbrField = value;
            }
        }
        
        /// <remarks/>
        public string mpalletnumber {
            get {
                return this.mpalletnumberField;
            }
            set {
                this.mpalletnumberField = value;
            }
        }
        
        /// <remarks/>
        public string line {
            get {
                return this.lineField;
            }
            set {
                this.lineField = value;
            }
        }
        
        /// <remarks/>
        public string routgroupId {
            get {
                return this.routgroupIdField;
            }
            set {
                this.routgroupIdField = value;
            }
        }
        
        /// <remarks/>
        public string storenumber {
            get {
                return this.storenumberField;
            }
            set {
                this.storenumberField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1015")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class tWipKeyPartTable {
        
        private string idxField;
        
        private string esnField;
        
        private string woIdField;
        
        private string sntypeField;
        
        private string snvalField;
        
        private string recdateField;
        
        /// <remarks/>
        public string idx {
            get {
                return this.idxField;
            }
            set {
                this.idxField = value;
            }
        }
        
        /// <remarks/>
        public string esn {
            get {
                return this.esnField;
            }
            set {
                this.esnField = value;
            }
        }
        
        /// <remarks/>
        public string woId {
            get {
                return this.woIdField;
            }
            set {
                this.woIdField = value;
            }
        }
        
        /// <remarks/>
        public string sntype {
            get {
                return this.sntypeField;
            }
            set {
                this.sntypeField = value;
            }
        }
        
        /// <remarks/>
        public string snval {
            get {
                return this.snvalField;
            }
            set {
                this.snvalField = value;
            }
        }
        
        /// <remarks/>
        public string recdate {
            get {
                return this.recdateField;
            }
            set {
                this.recdateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1015")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class tCartonInfo {
        
        private string cartonIdField;
        
        private string esnField;
        
        private string lineIdField;
        
        private string woIdField;
        
        private string mcartonnumberField;
        
        private string snField;
        
        private string macField;
        
        private string computerField;
        
        private int numberField;
        
        /// <remarks/>
        public string cartonId {
            get {
                return this.cartonIdField;
            }
            set {
                this.cartonIdField = value;
            }
        }
        
        /// <remarks/>
        public string esn {
            get {
                return this.esnField;
            }
            set {
                this.esnField = value;
            }
        }
        
        /// <remarks/>
        public string lineId {
            get {
                return this.lineIdField;
            }
            set {
                this.lineIdField = value;
            }
        }
        
        /// <remarks/>
        public string woId {
            get {
                return this.woIdField;
            }
            set {
                this.woIdField = value;
            }
        }
        
        /// <remarks/>
        public string mcartonnumber {
            get {
                return this.mcartonnumberField;
            }
            set {
                this.mcartonnumberField = value;
            }
        }
        
        /// <remarks/>
        public string sn {
            get {
                return this.snField;
            }
            set {
                this.snField = value;
            }
        }
        
        /// <remarks/>
        public string mac {
            get {
                return this.macField;
            }
            set {
                this.macField = value;
            }
        }
        
        /// <remarks/>
        public string computer {
            get {
                return this.computerField;
            }
            set {
                this.computerField = value;
            }
        }
        
        /// <remarks/>
        public int number {
            get {
                return this.numberField;
            }
            set {
                this.numberField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetQueryWipCompletedEventHandler(object sender, GetQueryWipCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQueryWipCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQueryWipCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetWipTrackingListCompletedEventHandler(object sender, GetWipTrackingListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWipTrackingListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWipTrackingListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetWipTrackingLineListCompletedEventHandler(object sender, GetWipTrackingLineListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWipTrackingLineListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWipTrackingLineListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPartNumberAndwoIdListCompletedEventHandler(object sender, GetPartNumberAndwoIdListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPartNumberAndwoIdListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPartNumberAndwoIdListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateWipCartonTrayPalletCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateWipStockInNumberCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetStockInPrintCompletedEventHandler(object sender, GetStockInPrintCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStockInPrintCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStockInPrintCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void InsertWipUndoCompletedEventHandler(object sender, InsertWipUndoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertWipUndoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertWipUndoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateScrapWipTrackingCompletedEventHandler(object sender, UpdateScrapWipTrackingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateScrapWipTrackingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateScrapWipTrackingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetWipDataCompletedEventHandler(object sender, GetWipDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWipDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWipDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateWipStationCompletedEventHandler(object sender, UpdateWipStationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateWipStationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateWipStationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateWipStation_NEWCompletedEventHandler(object sender, UpdateWipStation_NEWCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateWipStation_NEWCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateWipStation_NEWCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetEsnDataInfoCompletedEventHandler(object sender, GetEsnDataInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEsnDataInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEsnDataInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void StnRecCompletedEventHandler(object sender, StnRecCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StnRecCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StnRecCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetMaxBoxNumberBywoIdCompletedEventHandler(object sender, GetMaxBoxNumberBywoIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMaxBoxNumberBywoIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMaxBoxNumberBywoIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void InsertCartonInfoCompletedEventHandler(object sender, InsertCartonInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertCartonInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertCartonInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateWipAndRecCartonBoxCompletedEventHandler(object sender, UpdateWipAndRecCartonBoxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateWipAndRecCartonBoxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateWipAndRecCartonBoxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCartonStateCompletedEventHandler(object sender, GetCartonStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCartonStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCartonStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCartonPrintContentCompletedEventHandler(object sender, GetCartonPrintContentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCartonPrintContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCartonPrintContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void InsertWipKeyPartsCompletedEventHandler(object sender, InsertWipKeyPartsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertWipKeyPartsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertWipKeyPartsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void InsertWipKeyPartCompletedEventHandler(object sender, InsertWipKeyPartCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertWipKeyPartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertWipKeyPartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetNotCloseBoxInfoCompletedEventHandler(object sender, GetNotCloseBoxInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNotCloseBoxInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNotCloseBoxInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetMaxBoxNumberCompletedEventHandler(object sender, GetMaxBoxNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMaxBoxNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMaxBoxNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSnInfoCompletedEventHandler(object sender, GetSnInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSnInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSnInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPackCartonCompletedEventHandler(object sender, GetPackCartonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPackCartonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPackCartonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetWoAllSerialCompletedEventHandler(object sender, GetWoAllSerialCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWoAllSerialCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWoAllSerialCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPwdColumnsCompletedEventHandler(object sender, GetPwdColumnsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPwdColumnsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPwdColumnsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCartonContentCompletedEventHandler(object sender, GetCartonContentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCartonContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCartonContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CROSSTAB_WIPCompletedEventHandler(object sender, CROSSTAB_WIPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CROSSTAB_WIPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CROSSTAB_WIPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CloseCartonBoxCompletedEventHandler(object sender, CloseCartonBoxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CloseCartonBoxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CloseCartonBoxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCartonSnListCompletedEventHandler(object sender, GetCartonSnListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCartonSnListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCartonSnListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSnTestMachineInfoCompletedEventHandler(object sender, GetSnTestMachineInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSnTestMachineInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSnTestMachineInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateFirstCartonCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateWipTrackingWeightCompletedEventHandler(object sender, UpdateWipTrackingWeightCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateWipTrackingWeightCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateWipTrackingWeightCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591