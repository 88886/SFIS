//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.1026
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.1026 版自动生成。
// 
#pragma warning disable 1591

namespace 测试用例1.wcftest {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_IWeb_ESD_Info", Namespace="http://tempuri.org/")]
    public partial class Web_ESD_Info : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback Inser_ESD_InfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback Inser_ESD_LogOperationCompleted;
        
        private System.Threading.SendOrPostCallback Sel_UserNameOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Web_ESD_Info() {
            this.Url = global::测试用例1.Properties.Settings.Default.测试用例1_wcftest_Web_ESD_Info;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event Inser_ESD_InfoCompletedEventHandler Inser_ESD_InfoCompleted;
        
        /// <remarks/>
        public event Inser_ESD_LogCompletedEventHandler Inser_ESD_LogCompleted;
        
        /// <remarks/>
        public event Sel_UserNameCompletedEventHandler Sel_UserNameCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IWeb_ESD_Info/Inser_ESD_Info", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Inser_ESD_Info([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string hand_Test, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string foot_Test, out int Inser_ESD_InfoResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool Inser_ESD_InfoResultSpecified) {
            object[] results = this.Invoke("Inser_ESD_Info", new object[] {
                        userid,
                        hand_Test,
                        foot_Test});
            Inser_ESD_InfoResult = ((int)(results[0]));
            Inser_ESD_InfoResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void Inser_ESD_InfoAsync(string userid, string hand_Test, string foot_Test) {
            this.Inser_ESD_InfoAsync(userid, hand_Test, foot_Test, null);
        }
        
        /// <remarks/>
        public void Inser_ESD_InfoAsync(string userid, string hand_Test, string foot_Test, object userState) {
            if ((this.Inser_ESD_InfoOperationCompleted == null)) {
                this.Inser_ESD_InfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInser_ESD_InfoOperationCompleted);
            }
            this.InvokeAsync("Inser_ESD_Info", new object[] {
                        userid,
                        hand_Test,
                        foot_Test}, this.Inser_ESD_InfoOperationCompleted, userState);
        }
        
        private void OnInser_ESD_InfoOperationCompleted(object arg) {
            if ((this.Inser_ESD_InfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Inser_ESD_InfoCompleted(this, new Inser_ESD_InfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IWeb_ESD_Info/Inser_ESD_Log", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Inser_ESD_Log([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string TestInfo, out int Inser_ESD_LogResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool Inser_ESD_LogResultSpecified) {
            object[] results = this.Invoke("Inser_ESD_Log", new object[] {
                        userid,
                        TestInfo});
            Inser_ESD_LogResult = ((int)(results[0]));
            Inser_ESD_LogResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void Inser_ESD_LogAsync(string userid, string TestInfo) {
            this.Inser_ESD_LogAsync(userid, TestInfo, null);
        }
        
        /// <remarks/>
        public void Inser_ESD_LogAsync(string userid, string TestInfo, object userState) {
            if ((this.Inser_ESD_LogOperationCompleted == null)) {
                this.Inser_ESD_LogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInser_ESD_LogOperationCompleted);
            }
            this.InvokeAsync("Inser_ESD_Log", new object[] {
                        userid,
                        TestInfo}, this.Inser_ESD_LogOperationCompleted, userState);
        }
        
        private void OnInser_ESD_LogOperationCompleted(object arg) {
            if ((this.Inser_ESD_LogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Inser_ESD_LogCompleted(this, new Inser_ESD_LogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IWeb_ESD_Info/Sel_UserName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Sel_UserName([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userID) {
            object[] results = this.Invoke("Sel_UserName", new object[] {
                        userID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Sel_UserNameAsync(string userID) {
            this.Sel_UserNameAsync(userID, null);
        }
        
        /// <remarks/>
        public void Sel_UserNameAsync(string userID, object userState) {
            if ((this.Sel_UserNameOperationCompleted == null)) {
                this.Sel_UserNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSel_UserNameOperationCompleted);
            }
            this.InvokeAsync("Sel_UserName", new object[] {
                        userID}, this.Sel_UserNameOperationCompleted, userState);
        }
        
        private void OnSel_UserNameOperationCompleted(object arg) {
            if ((this.Sel_UserNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Sel_UserNameCompleted(this, new Sel_UserNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Inser_ESD_InfoCompletedEventHandler(object sender, Inser_ESD_InfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Inser_ESD_InfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Inser_ESD_InfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Inser_ESD_InfoResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool Inser_ESD_InfoResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Inser_ESD_LogCompletedEventHandler(object sender, Inser_ESD_LogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Inser_ESD_LogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Inser_ESD_LogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Inser_ESD_LogResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool Inser_ESD_LogResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Sel_UserNameCompletedEventHandler(object sender, Sel_UserNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Sel_UserNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Sel_UserNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591